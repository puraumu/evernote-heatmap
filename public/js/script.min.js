// Generated by CoffeeScript 1.3.1
(function() {
  var Cells, Conf, Disp, Posi, X_disp, Y_disp, day_format, dynamicRenderer, initializeConf, json_url, month_format, mouseout, mouseover, rerender, resetCoordinate, week_format, year_selection;

  rerender = function() {
    resetCoordinate();
    initializeConf();
    return dynamicRenderer();
  };

  d3.select('#view-mode').on('change', function() {
    var mode;
    mode = this.value;
    if (mode === 'day-mode') {
      Conf.viewMode = 'day_view';
    }
    if (mode === 'week-mode') {
      Conf.viewMode = 'week_view';
    }
    if (mode === 'month-mode') {
      Conf.viewMode = 'month_view';
    }
    return rerender();
  });

  d3.select('#yaxis').on('change', function() {
    var yaxis;
    yaxis = this.value;
    if (yaxis === 'tag') {
      Conf.yaxis = 'tag';
    }
    if (yaxis === 'notebook') {
      Conf.yaxis = 'notebook';
    }
    return rerender();
  });

  d3.select('#go').on('click', function() {
    var month, year;
    year = d3.select('#year').node().value;
    month = d3.select('#month').node().value;
    Conf.start = new Date(year, month);
    return rerender();
  });

  d3.select('#choose-color').on('change', function() {
    var val;
    val = this.value;
    d3.select('#right').select('svg').attr('class', "" + val);
    d3.select('#sample').attr('class', "" + val);
    return Conf.color = val;
  });

  mouseover = function(p) {
    var date, left, name, pop, right, top, x, y;
    right = d3.select('#right')[0][0];
    left = right.scrollLeft;
    top = right.scrollTop;
    pop = d3.select('#pop');
    date = Conf.x_days[p.x];
    name = Conf.y_names[p.y];
    x = p.x * Posi.tile() + Posi.rowHead + Posi.rowHeadMargin - left;
    y = p.y * Posi.tile() + Posi.dateMargin - Posi.cellSize;
    pop.classed('hide', false);
    pop.style('left', "" + x + "px").style('top', "" + y + "px");
    pop.select('.date').text("" + date);
    pop.select('.name').text("" + name);
    return pop.select('.value').text("" + p.z);
  };

  mouseout = function(p) {
    var pop;
    pop = d3.select('#pop');
    return pop.classed('hide', true);
  };

  /*
  === DATA ===
  */


  month_format = d3.time.format("%Y-%m");

  week_format = function(date) {
    var out;
    out = Math.round((date.getDate() + 7 - date.getDay()) / 7);
    if (out === 0) {
      out = 1;
    }
    if (out === 1) {
      out = '1st';
    }
    if (out === 2) {
      out = '2nd';
    }
    if (out === 3) {
      out = '3rd';
    }
    if (out > 3) {
      out = "" + out + "th";
    }
    return "" + (month_format(date)) + "-" + out;
  };

  day_format = d3.time.format("%Y-%m-%d");

  Disp = d3.select('#display');

  X_disp = Disp;

  Y_disp = Disp;

  Cells = Disp;

  Conf = {
    start: (function() {
      var half, latest;
      latest = new Date().getTime();
      half = 1 * 30 * 24 * 60 * 60 * 1000;
      return new Date(latest - half);
    })(),
    end: new Date(),
    color: "YlGn",
    json: [],
    x_days: [],
    y_names: [],
    yaxis: "tag",
    viewMode: 'day_view'
  };

  Posi = {
    dateMargin: 70,
    rowHeadMargin: 7,
    rowHead: 100,
    width: 940,
    displayWidth: function() {
      return Posi.width - Posi.rowHead;
    },
    cellSize: 18,
    cellMargin: 2,
    tile: function() {
      return Posi.cellSize + Posi.cellMargin;
    }
  };

  initializeConf = function() {
    var end, foo, item, left, right, sta, tag, time, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    sta = Conf.start.getTime();
    end = Conf.end.getTime();
    if (Conf.yaxis === 'notebook') {
      foo = {};
      _ref = Conf.json;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        time = item.created;
        if (sta < time && time < end) {
          foo[item.notebook] = null;
        }
      }
      Conf.y_names = Object.keys(foo).sort();
    }
    if (Conf.yaxis === 'tag') {
      foo = {};
      _ref1 = Conf.json;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        item = _ref1[_j];
        time = item.created;
        if (sta < time && time < end) {
          _ref2 = item.tags;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            tag = _ref2[_k];
            foo[tag] = null;
          }
        }
      }
      Conf.y_names = Object.keys(foo).sort();
    }
    if (Conf.viewMode === 'day_view') {
      Conf.x_days = d3.time.days(Conf.start, Conf.end).map(function(d) {
        return day_format(d);
      });
    }
    if (Conf.viewMode === 'week_view') {
      Conf.x_days = d3.time.weeks(Conf.start, Conf.end).map(function(d) {
        return week_format(d);
      });
    }
    if (Conf.viewMode === 'month_view') {
      Conf.x_days = d3.time.months(Conf.start, Conf.end).map(function(d) {
        return month_format(d);
      });
    }
    left = Disp.select('#left').append('svg').attr('width', Posi.rowHead).attr('height', Conf.y_names.length * Posi.tile() + Posi.dateMargin);
    right = Disp.select('#right').append('svg').attr('width', function() {
      var width;
      width = Conf.x_days.length * Posi.tile() + Posi.tile() * 2;
      if (width < Posi.displayWidth()) {
        return Posi.displayWidth() - Posi.rowHeadMargin;
      } else {
        return width;
      }
    }).attr('height', Conf.y_names.length * Posi.tile() + Posi.dateMargin).attr('class', "" + Conf.color);
    right.append('rect').attr('x', 0).attr('y', Posi.dateMargin).attr('height', Conf.y_names.length * Posi.tile()).attr('width', Conf.x_days.length * Posi.tile()).attr('class', "q0-9");
    X_disp = right.append('g').attr('id', 'X-disp').attr("transform", "translate(" + 0 + ", " + Posi.dateMargin + ")");
    Y_disp = left.append('g').attr('id', 'Y-disp').attr("transform", "translate(" + Posi.rowHead + ", " + (Posi.dateMargin + Posi.cellSize - 3) + ")");
    return Cells = right.append('g').attr('id', 'Cells').attr("transform", "translate(" + 0 + ", " + Posi.dateMargin + ")");
  };

  console.log(Conf);

  /*
  === /DATA ===
  */


  /*
  === Renderer ===
  */


  resetCoordinate = function() {
    Disp.select('#left').select('svg').remove();
    Disp.select('#right').select('svg').remove();
    return d3.select('#sample').select('g').remove();
  };

  dynamicRenderer = function() {
    /*
      === Positioning ===
    */

    var colorbrewer, date_list, domain, f, format, i, item, matrix, name_list, row, sample, scale_down, tag, usm_width, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
    colorbrewer = d3.range(9);
    sample = d3.select('#sample').attr('class', "" + Conf.color).attr('width', colorbrewer.length * Posi.tile()).attr('height', Posi.tile() * 1.0);
    sample.append('g').selectAll('rect').data(colorbrewer).enter().append('rect').attr('x', function(d) {
      return d * Posi.tile();
    }).attr('y', 0).attr('height', Posi.cellSize).attr('width', Posi.cellSize).attr('class', function(d) {
      return "q" + d + "-9";
    });
    date_list = Conf.x_days;
    name_list = Conf.y_names;
    usm_width = 1;
    matrix = [];
    if (Conf.viewMode === 'day_view') {
      format = day_format;
    }
    if (Conf.viewMode === 'week_view') {
      format = week_format;
    }
    if (Conf.viewMode === 'month_view') {
      format = month_format;
    }
    for (i = _i = 0, _len = name_list.length; _i < _len; i = ++_i) {
      item = name_list[i];
      matrix[i] = d3.range(date_list.length).map(function(x) {
        return {
          x: x,
          y: i,
          z: 0
        };
      });
    }
    if (Conf.yaxis === 'notebook') {
      _ref = Conf.json;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        item = _ref[_j];
        f = format(new Date(item.created));
        x = date_list.indexOf(f);
        if (x === -1) {
          continue;
        }
        y = name_list.indexOf(item.notebook);
        if (y === -1) {
          continue;
        }
        matrix[y][x].z += 1;
      }
    }
    if (Conf.yaxis === 'tag') {
      _ref1 = Conf.json;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        item = _ref1[_k];
        f = format(new Date(item.created));
        x = date_list.indexOf(f);
        if (x === -1) {
          continue;
        }
        _ref2 = item.tags;
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          tag = _ref2[_l];
          y = name_list.indexOf(tag);
          if (y === -1) {
            continue;
          }
          matrix[y][x].z += 1;
        }
      }
    }
    row = Cells.selectAll('g').data(matrix).enter().append('g').attr("transform", function(d, i) {
      return "translate(0, " + (i * Posi.tile()) + ")";
    });
    row.append('line').attr('x1', 0).attr('x2', function() {
      return Posi.tile() * date_list.length - 1;
    }).attr('y1', Posi.cellSize + usm_width * 0.5).attr('y2', Posi.cellSize + usm_width * 0.5).attr('stroke', 'deepskyblue').attr('stroke-width', usm_width);
    row.append('line').attr('x1', 0).attr('x2', function() {
      return Posi.tile() * date_list.length - 1;
    }).attr('y1', (Posi.cellSize + usm_width) + usm_width * 0.5).attr('y2', (Posi.cellSize + usm_width) + usm_width * 0.5).attr('stroke', 'white').attr('stroke-width', usm_width);
    X_disp.selectAll('.shadow').data(d3.range(date_list.length + 1)).enter().append('line').attr('class', 'shadow').attr('x1', function(d) {
      return d * Posi.tile() - usm_width * 1.5;
    }).attr('x2', function(d) {
      return d * Posi.tile() - usm_width * 1.5;
    }).attr('y1', 0).attr('y2', function(d) {
      return Posi.tile() * Conf.y_names.length - 1;
    }).attr('stroke', 'deepskyblue').attr('stroke-width', usm_width);
    Cells.selectAll('.back').data(d3.range(date_list.length + 1)).enter().append('line').attr('class', 'back').attr('x1', function(d) {
      return (d * Posi.tile() + usm_width) - usm_width * 1.5;
    }).attr('x2', function(d) {
      return (d * Posi.tile() + usm_width) - usm_width * 1.5;
    }).attr('y1', 0).attr('y2', function(d) {
      return Posi.tile() * Conf.y_names.length - 1;
    }).attr('stroke', 'white').attr('stroke-width', usm_width);
    X_disp.selectAll('g').data(date_list).enter().append('g').attr("transform", function(d, i) {
      return "translate(" + (Posi.tile() * i + 10) + ", 0)";
    }).append('text').attr("transform", "translate(0, 0)rotate(-50)").attr('fill', "#333").style('font-size', 13).text(function(d) {
      return d;
    });
    Y_disp.selectAll('text').data(name_list).enter().append('text').attr('y', function(d, i) {
      return Posi.tile() * i;
    }).attr('text-anchor', "end").attr('fill', "#333").style('font-size', 13).text(function(d) {
      return d;
    });
    if (Conf.viewMode === 'day_view') {
      domain = [0, 10];
    }
    if (Conf.viewMode === 'week_view') {
      domain = [0, 20];
    }
    if (Conf.viewMode === 'month_view') {
      domain = [0, 50];
    }
    scale_down = function(n) {
      var linear, out;
      if (n === 0) {
        return 0;
      }
      linear = d3.scale.linear().domain(domain).range([1, 8]);
      out = linear(n);
      if (out > 8) {
        return 8;
      } else {
        return Math.round(out);
      }
    };
    row.each(function(d) {
      return d3.select(this).selectAll('rect').data(d.filter(function(j) {
        return j.z > 0;
      })).enter().append('rect').attr('class', function(d) {
        return "" + Conf.viewMode + " q" + (scale_down(d.z)) + "-9";
      }).attr('height', Posi.cellSize).attr('width', Posi.cellSize).attr('x', function(d, i) {
        return Posi.tile() * d.x;
      }).attr('y', 0);
    });
    /*
      === /Positioning ===
    */

    /*
      === Coloring ===
    */

    return Cells.selectAll('rect').on('mouseover', mouseover).on('mouseout', mouseout);
    /*
      === /Coloring ===
    */

  };

  /*
  === /Renderer ===
  */


  /*
  === Only Once, Initialize ===
  */


  year_selection = function() {
    var day_list, item, oldest, this_year, year_range, _i, _len, _ref;
    this_year = new Date().getFullYear();
    day_list = [];
    _ref = Conf.json;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      day_list.push(item.created);
    }
    oldest = day_list.sort()[0];
    year_range = this_year - new Date(oldest).getFullYear() + 1;
    year_range = d3.range(year_range).map(function(i) {
      return this_year - i;
    });
    return d3.select('#year').selectAll('option').data(year_range).enter().append('option').attr('value', function(d) {
      return d;
    }).text(function(d) {
      return d;
    });
  };

  json_url = "/static/evernote.json";

  d3.json(json_url, function(json) {
    Conf.json = json;
    initializeConf();
    year_selection();
    return dynamicRenderer();
  });

  /*
  === /Only Once, Initialize ===
  */


}).call(this);
